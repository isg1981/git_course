Git

1) git init 
"""git init se utiliza para inicializar una carpeta de working directory"""

2) git status para ver el status de la branch o commits

3) git add . 
"""para subir los cambios al área de preparación, también conocida como el índice.
El área de preparación es un espacio intermedio entre el directorio de trabajo y el repositorio Git, donde se pueden
seleccionar los cambios específicos que se desean incluir en el próximo commit. Se hacer git add nombre-archivo solo
para addeitear ese archivo especifico"""

4) git commit -m "la descripción del commit"

5) git log
"""muestra los commits generados y el numero de commit"""

6) git branch
"""muestra las branches que se tienen""" 

6*) git branch nueva-branch
"""genera una nueva branch pero no se para en ella"""

7) git checkout nombre-branch
"""Se para en la branch nombre-branch"""

7*) git checkout -b nombre-nueva-branch
"""genera una nueva branch y se para en ella"""

8) git checkout 80be5d0edacba3ab20b41e0dfaeb94ce8e6bda61
"""el código del checkout nos permite pasar a commits anteriores y ver esos cambios"""

9) git checkout master
"""Además de permitir pasar a la branch master, nos permite volver a los últimos commits"""

10) git switch nombre-branch
"""cambia de branch, también hace lo mismo que git checkout pero la diferencia es que es especifico de branchs,
mientras checkout es para branchs y commits"""

11) git switch -c nueva-branch
"""Hace lo mismo que git checkout -b, crea una nueva branch y se para en ella."""

12) git ls-files
"""Me muestra todos los archivos que tiene la branch, incluso si fueron borrados."""

13) git rm nombre-file
"""borra un archivo, luego hacer git commit -m "" y se gerea un commit de borrado del archivo."""

14) git revert HEAD~1..HEAD
"""Me revierte el último commit, en este caso el borrado del archivo. En caso de hacer git revert HEAD~2..HEAD
me revierte a 2 commits anteriores. Para salir de la pantalla de git revert se coloca :q!"""

15) git restore nombre-file-a-restorear
"""si tenemos cambios en un archivo y queremos borrarlos o volver a la version del último commit hacemos git restore
y el nombre del file"""

16) git clean -dn
"""me hace un listado de los archivos que figuran en el status pero no están commiteados que podrían borrarse"""

17) git clean -df
"""borra los archivos que no están commiteados"""

18) """Para deshacer una modificacion de un archivo que haya sido stageado (git add) hay que hacer 2 pasos."""
    1- git reset nombre-archivo-stageado
    2- git checkout nombre-archivo-stageado """Esto se hace para ver la modificación en el archivo"""

19) """Otra manera de hacer 18) es usar:"""
    1- git restore --stage nombre-archivo-stageado
    2- git checkout nombre-archivo-stageado

20) git reset --soft HEAD~1
"""resetea el último commit, es decir deshace el commit, pero el archivo sigue estando en el stage area (git ls-files).
Si hacemos git reset HEAD~1 se resetea el último commit pero el archivo también desaparece del stage area,
pero sigue apareciendo en el working directory.
El último es el git reset --hard HEAD~1 borra el commit, borra el archivo del stage area (git ls-files)
y borra el archivo del working directory"""

21) git branch -d nombre-branch
"""Se pueden borrar las branchs que no se necesitan, las que ya se hayan mergeado por ejemplo se usa -d,
si uso -D es para forzar el delete de branch sin importar si fueron o no mergeadas. Se pueden borrar multiples
branchs poniendo el nombre a continuación de otro."""

22) """Si queremos hacer modificaciones a un commit anterior, entonces vamos a dicho commit con git checkout ID_commit
y aparece el HEAD-Detached mode en git branch. En este caso se hacen las modificaciones necesarias, luego 
git add, git commit y si queremos cambiar de branch vamos a ver que las branches estan desfazadas. En este caso
tenemos que crear una nueva branch con git branch <new-branch-name> 20e2318 (este codigo final cambia). 
Una vez creada esta branch vamos a master y hacemos un git merge new-branch-name. Cuando se mergea vamos a 
ver que todo lo agregado en ese viejo commit aparece ahora en maste. Luego podemos borrar la branch."""

23) """Si queremos tener cosas en el working directory y no compartirlas, podemos usar el gitignore para 
ignorar esos archivos o carpetas. Para eso creamos un archivo en el working directory que sea .gitignore.
Dentro del gitignore ponemos el nombre del archivo que queremos ignorar. En caso de ser varios archivos
se puede usar el *.log para ignorar todos los archivos .log. Si hubiera algún archivo de los .log que no 
se quisiera ignorar entonce se pone además !nombre.log con el nombre del archivo a no ignorar. Por otro
lado, si se quiere ignorar una carpeta se puede hacer poniendo el nombre de la carpeta seguido de /* para 
agregar que de esa carpeta se ignoran todos los archivos."""


Segunda parte
-------------------------------- stash ------------------------------------------------
1) git stash
"""Guarda la info que no se commitio y vuelve al estado inicial."""

2) git stash apply
"""Recuperamos los cambios que se habían stasheados"""

3) git stash list
"""En caso de hacer nuevas modificaciones y stashear el git stash apply solo nos lleva al último stash.
Si queremos ver stasheos anteriores aplicamos git stash list."""

4) git stash apply 2
"""Ahí nos movemos al stash con el índice 2. El índice 0 refiere al úlmimo stash que se haga."""

5) git stash push -m "comentario del stash"
"""Podemos agregar comentarios al stash haciendo esto para recordar el tipo de stash que se hizo"""

6) git stash pop 0
"""Si queremos traer nuevamente los cambios del último stash. Luego git add, git commit y traemos todos los
datos de ese stash. También se podría usar apply en lugar de pop."""

7) git stash drop 2
"""Si queremos borrar el stash de índice 2."""

8) git stash clear
"""borra todos los stash que haya"""

--------------------------------------
9)git reflog
"""Permite ver toda la info que se tiene en el proyecto y con esto recuperar información que se halla perdido. 
Reglog storea toda nuestros cambios que hayamos hecho en el proyecto de git. Si borramos el último commit con 
git reset --hard HEAD~1. Luego ponemos git reflog y vemos toda la info de todos lo commits previos. Copiaomos 
el código del commit que queremos recuperar y ponemos git reset --hard d5bebc2. Con eso último recupero el commit borrado. 
También git reflog permite recuperar los borrados de branchs""" 

-------------------------------------- Merge ------------------------------------
10) git merge branch_a_mergear
"""Fast-foward merge se produce cuanto estuve trabajando en una branch aparte y quiero traer los últimos cambios,
commits de la branch a master. En ese caso salgo de la branch y voy a master y mergeo. Esto se da solo cuando no 
nuevos commits en master. Solo cambia el HEAD de la branch a mergear a master.

11) git merge --squash branch_a_mergear 
"""Lo que hace es traer los cambios de la branch a mergear a master, como si hubiera hecho git add . En este caso
hago git commit y tengo los cambios mergeados en master"""

12) git rebase master
"""El git rebase sirve para agregar los commits de otras branch a alguna determinada, sabiendo que se hicieron modificaciones 
en la branch determinada. En este caso se traen las modificaciones de master a la otra branch.
Si estoy parado en la branch que tiene los commits que quiero pasar a la branch master, entonces hago git rebase
master. Hay que tener cuidado con esto ya que rebase crea nuevos commits en master en lugar de pasar los que se habían
hecho en la otra branch. No es recomendado cuando se tienen working directories remotos, por ejomplo github. 
Si lo combinamos con 'git merge branch-determinada' desde master lo que tenemos nuevamente es un Fast-forward merge, trayendo
a master todas las modificaciones de la branch-determinada."""

13) git merge --abort
"""Si estamos haciendo un merge y salta un conflicto, podemos abortar el merge y volvemos al momento previo."""

14) git log --merge
"""Nos permite ver los commits que estamos por mergear, para obtener más info de los commits que se están realizando."""

15) git diff
"""En lo mismo nos da la diferencia de lo que se quiere mergear y los conflictos

-----cherry-pick--------
16) """Cherry-pick sirve para traer un solo commit y no todos de alguna branch en particular. En el caso de git merge se traen
todos los commits y se mergean. Si en lugar de eso no queremos mergear todos los commits podemos usar cherry-pick y mergear los 
commits que queremos."""

17) git cherry-pick cc8a1170a26781c38fa8a2fccb85b653f02ed481
"""En este caso estoy mergendo un commit determinado de una branch en la branch donde estoy parado a la hora de hacer el 
git cherry-pick."""

-------- tag ------------------
18) git tag nombre-tag cc8a1170a26781c38fa8a2fccb85b653f02ed481
"""El git tag sirve para darle seguimiento y no perder de vista algún commit importante. Cosa de que si hay que volver se pueda
volver a ese commit particular. Una vez hecho lo de arriba podemos hacer git tag para ver los tags que tenemos con sus nombres"""

19) git show nobre-tag 
"""Esto sirve para ver el commit que tenemos asociado a ese tag determinado, me devuelve el ID del commit flageado."""

20) git tag -d nombre-tag
"""con esto borramos la tag sobre el commit determinado."""

21) git tag -a nombre-tag -m "mensaje del tag"
"""esto lo que hace es agregar un tag al úlmimo commit y un mensaje que aparece cuado se hace el git show nombre-tag."""

22) """En los siguientes links se puede encontrar más información de conflictos y estrategias en el merge 
More on merge conflicts => https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_advanced_merging
Additional merge strategies => https://git-scm.com/docs/merge-strategies """

Tercer parte
---------------------------------GitHub------------------------------------------------------
"""si tengo todo en un repositorio local y quiero llevar lo a github, tengo que hacer git remote add origin URL. Donde origin 
el nombre de la máquina remota, de alguna manera el alias de la URL remota.

git branch -M main
"""Esto renombra la branch master en la main branch. Si no queremos renombrarla no hace falta este paso."""

git push -u origin main
"""En este caso se pushea la branch main al remoto. 

El último commit en cada branch es lo que se denomina head 