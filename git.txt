Git

1) git init 
"""git init se utiliza para inicializar una carpeta de working directory"""

2) git status para ver el status de la branch o commits

3) git add . 
"""para subir los cambios al área de preparación, también conocida como el índice.
El área de preparación es un espacio intermedio entre el directorio de trabajo y el repositorio Git, donde se pueden
seleccionar los cambios específicos que se desean incluir en el próximo commit. Se hacer git add nombre-archivo solo
para addeitear ese archivo especifico"""

4) git commit -m "la descripción del commit"

5) git log
"""muestra los commits generados y el numero de commit"""

6) git branch
"""muestra las branches que se tienen""" 

6*) git branch nueva-branch
"""genera una nueva branch pero no se para en ella"""

7*) git checkout nombre-branch
"""Se para en la branch nombre-branch"""

7) git checkout -b nombre-nueva-branch
"""genera una nueva branch y se para en ella"""

8) git checkout 80be5d0edacba3ab20b41e0dfaeb94ce8e6bda61
"""el código del checkout nos permite pasar a commits anteriores y ver esos cambios"""

9) git checkout master
"""Además de permitir pasar a la branch master, nos permite volver a los últimos commits"""

10) git switch nombre-branch
"""cambia de branch, también hace lo mismo que git checkout pero la diferencia es que es especifico de branchs,
mientras checkout es para branchs y commits"""

11) git switch -c nueva-branch
"""Hace lo mismo que git checkout -b, crea una nueva branch y se para en ella."""

12) git ls-files
"""Me muestra todos los archivos que tiene la branch, incluso si fueron borrados."""

13) git rm nombre-file
"""borra un archivo, luego hacer git commit -m "" y se gerea un commit de borrado del archivo."""

14) git revert HEAD~1..HEAD
"""Me revierte el último commit, en este caso el borrado del archivo. En caso de hacer git revert HEAD~2..HEAD
me revierte a 2 commits anteriores. Para salir de la pantalla de git revert se coloca :q!"""

15) git restore nombre-file-a-restorear
"""si tenemos cambios en un archivo y queremos borrarlos o volver a la version del último commit hacemos git restore
y el nombre del file"""

16) git clean -dn
"""me hace un listado de los archivos que figuran en el status pero no están commiteados que podrían borrarse"""

17) git clean -df
"""borra los archivos que no están commiteados"""

18) """Para deshacer una modificacion de un archivo que haya sido stageado (git add) hay que hacer 2 pasos."""
    1- git reset nombre-archivo-stageado
    2- git checkout nombre-archivo-stageado """Esto se hace para ver la modificación en el archivo"""

19) """Otra manera de hacer 18) es usar:"""
    1- git restore --stage nombre-archivo-stageado
    2- git checkout nombre-archivo-stageado

20) git reset --soft HEAD~1
"""resetea el último commit, es decir deshace el commit, pero el archivo sigue estando en el stage area (git ls-files).
Si hacemos git reset HEAD~1 se resetea el último commit pero el archivo también desaparece del stage area,
pero sigue apareciendo en el working directory.
El último es el git reset --hard HEAD~1 borra el commit, borra el archivo del stage area (git ls-files)
y borra el archivo del working directory"""

21) git branch -d nombre-branch
"""Se pueden borrar las branchs que no se necesitan, las que ya se hayan mergeado por ejemplo se usa -d,
si uso -D es para forzar el delete de branch sin importar si fueron o no mergeadas. Se pueden borrar multiples
branchs poniendo el nombre a continuación de otro."""

22) """Si queremos hacer modificaciones a un commit anterior, entonces vamos a dicho commit con git checkout ID_commit
y aparece el HEAD-Detached mode en git branch. En este caso se hacen las modificaciones necesarias, luego 
git add, git commit y si queremos cambiar de branch vamos a ver que las branches estan desfazadas. En este caso
tenemos que crear una nueva branch con git branch <new-branch-name> 20e2318 (este codigo final cambia). 
Una vez creada esta branch vamos a master y hacemos un git merge new-branch-name. Cuando se mergea vamos a 
ver que todo lo agregado en ese viejo commit aparece ahora en maste. Luego podemos borrar la branch."""

23) """Si queremos tener cosas en el working directory y no compartirlas, podemos usar el gitignore para 
ignorar esos archivos o carpetas. Para eso creamos un archivo en el working directory que sea .gitignore.
Dentro del gitignore ponemos el nombre del archivo que queremos ignorar. En caso de ser varios archivos
se puede usar el *.log para ignorar todos los archivos .log. Si hubiera algún archivo de los .log que no 
se quisiera ignorar entonce se pone además !nombre.log con el nombre del archivo a no ignorar. Por otro
lado, si se quiere ignorar una carpeta se puede hacer poniendo el nombre de la carpeta seguido de /* para 
agregar que de esa carpeta se ignoran todos los archivos."""


Segunda parte

1) git stash
"""Guarda la info que no se commitio y vuelve al estado inicial."""

2) git stash apply
"""Recuperamos los cambios que se habían stasheados"""

3) git stash list
"""En caso de hacer nuevas modificaciones y stashear el git stash apply solo nos lleva al último stash.
Si queremos ver stasheos anteriores aplicamos git stash list."""



El último commit en cada branch es lo que se denomina head 